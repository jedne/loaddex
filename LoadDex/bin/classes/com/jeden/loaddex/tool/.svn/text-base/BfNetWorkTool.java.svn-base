package com.bfroot.tool;

import android.annotation.SuppressLint;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.provider.Settings;

/**
 * 网络初始化
 * 
 * @author jeden
 * 
 */
@SuppressLint("DefaultLocale")
public class BfNetWorkTool
{

	// 记录用户wap付费前是否开启gprs
	private static Boolean IS_GPRS = false;

	// 记录用户是否开启wap模式
	private static Boolean IS_WIFI_OPEN = false;

	public static final String CODE_USE_CN_WIFI = "c_wifi";
	
	public static final String CODE_USE_ON_WIFI = "o_wifi";
	
	public static final String CODE_USE_ON_GPRS = "o_gprs";
	
	public static final String CODE_USE_MN_HTTP = "m_http";
	
	/**
	 * 获取gprs开启状态
	 * 
	 * @return 获取gprs开启状态
	 */
	public static Boolean is_gprs_open()
	{
		return IS_GPRS;
	}

	/**
	 * 获取wifi开启状态
	 * 
	 * @return 获取wifi开启状态
	 */
	public static Boolean is_wifi_open()
	{
		return IS_WIFI_OPEN;
	}

	/**
	 * 联网前，网络初始化(开启gprs)
	 * 
	 * @param context
	 * @param codeUseNetType
	 * @return
	 */
	public static Boolean bfNetWorkInit(Context context, String codeUseNetType)
	{
		/*获取当前 网络状况*/
		bfGetNetWork(context);
		BfTool.BfLog( "bfNetWorkTool  init is_wifi_open:"+IS_WIFI_OPEN+"is_gprs:"+IS_GPRS);
		/*如果是飞信模式则返回false*/
		if(isAirplaneModeOn(context))
		{
			return false;
		}
		/*如果是wifi模式则不需要改变网络模式*/
		if(IS_WIFI_OPEN)
		{
			if(!codeUseNetType.equals(CODE_USE_ON_GPRS))	
			{
				return true;
			}
			else
			{
				/*关闭wifi*/
				bfSetWifiEnabled(context, false);
			}
		}
		if(IS_GPRS)
		{
			return true;
		}
		else
		{
			if(codeUseNetType.equals(CODE_USE_ON_GPRS) || codeUseNetType.equals(CODE_USE_MN_HTTP))
			{
				/*打开GPRSss*/
				if (!IS_GPRS)
				{
					BfChangeGprs gprs = new BfChangeGprs();
					gprs.bfOpenGprs(context);
					try
					{
						Thread.sleep(8000);
					}
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
				}
				return true;
			}
			else
			{
				return false;
			}
		}
	}

	/**
	 * 记录用户最初网络环境
	 * 
	 * @param context
	 */
	public static void bfGetNetWork(Context context)
	{
		IS_GPRS = false;
		IS_WIFI_OPEN = false;

		WifiManager wifiManager = (WifiManager) context
				.getSystemService(Context.WIFI_SERVICE);
		IS_WIFI_OPEN = wifiManager.isWifiEnabled();
		if(IS_WIFI_OPEN)
		{
			WifiManager mWifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
			WifiInfo wifiInfo = mWifiManager.getConnectionInfo();
			int ipAddress = wifiInfo == null ? 0 : wifiInfo.getIpAddress();
			IS_WIFI_OPEN =  (mWifiManager.isWifiEnabled() && ipAddress != 0);
		}

		ConnectivityManager cm = (ConnectivityManager) context
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		String typeName = null;
		NetworkInfo info = cm.getActiveNetworkInfo();
		if (info != null)
		{
			typeName = info.getTypeName().toLowerCase();

			if (typeName.equals("mobile"))
			{
				IS_GPRS = true;
			}
		}
	}

	/**
	 * 设置wifi开启或这关闭
	 * 
	 * @param context
	 * @param enable
	 *            打开或者关闭wifi
	 */
	public static void bfSetWifiEnabled(Context context, boolean enable)
	{
		WifiManager wifiManager = (WifiManager) context
				.getSystemService(Context.WIFI_SERVICE);

		if (wifiManager.isWifiEnabled() == enable)
		{
			return;
		}

		wifiManager.setWifiEnabled(enable);
	}

	/**
	 * 恢复用户最初网络环境
	 * 
	 * @param context
	 */
	public static void bfRegainNetWork(Context context)
	{
		/*关闭GPRS*/
		if (!IS_GPRS)
		{
			BfChangeGprs gprs = new BfChangeGprs();
			gprs.bfCloseGprs(context);
		}

		bfSetWifiEnabled(context, IS_WIFI_OPEN);
		try 
		{
			Thread.sleep(3000);
		} catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
	}
	
	/**
	 * 是否是飞行模式
	 */
	public static boolean isAirplaneModeOn(Context context)
	{
		return Settings.System.getInt(context.getContentResolver(),  
					Settings.System.AIRPLANE_MODE_ON, 0) != 0;  
	}
}
